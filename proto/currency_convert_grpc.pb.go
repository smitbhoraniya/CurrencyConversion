// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: proto/currency_convert.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CurrencyConvertService_Convert_FullMethodName = "/proto.CurrencyConvertService/Convert"
)

// CurrencyConvertServiceClient is the client API for CurrencyConvertService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CurrencyConvertServiceClient interface {
	Convert(ctx context.Context, in *CurrencyConvertRequest, opts ...grpc.CallOption) (*CurrencyConvertResponse, error)
}

type currencyConvertServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCurrencyConvertServiceClient(cc grpc.ClientConnInterface) CurrencyConvertServiceClient {
	return &currencyConvertServiceClient{cc}
}

func (c *currencyConvertServiceClient) Convert(ctx context.Context, in *CurrencyConvertRequest, opts ...grpc.CallOption) (*CurrencyConvertResponse, error) {
	out := new(CurrencyConvertResponse)
	err := c.cc.Invoke(ctx, CurrencyConvertService_Convert_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CurrencyConvertServiceServer is the server API for CurrencyConvertService service.
// All implementations must embed UnimplementedCurrencyConvertServiceServer
// for forward compatibility
type CurrencyConvertServiceServer interface {
	Convert(context.Context, *CurrencyConvertRequest) (*CurrencyConvertResponse, error)
	mustEmbedUnimplementedCurrencyConvertServiceServer()
}

// UnimplementedCurrencyConvertServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCurrencyConvertServiceServer struct {
}

func (UnimplementedCurrencyConvertServiceServer) Convert(context.Context, *CurrencyConvertRequest) (*CurrencyConvertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Convert not implemented")
}
func (UnimplementedCurrencyConvertServiceServer) mustEmbedUnimplementedCurrencyConvertServiceServer() {
}

// UnsafeCurrencyConvertServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CurrencyConvertServiceServer will
// result in compilation errors.
type UnsafeCurrencyConvertServiceServer interface {
	mustEmbedUnimplementedCurrencyConvertServiceServer()
}

func RegisterCurrencyConvertServiceServer(s grpc.ServiceRegistrar, srv CurrencyConvertServiceServer) {
	s.RegisterService(&CurrencyConvertService_ServiceDesc, srv)
}

func _CurrencyConvertService_Convert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrencyConvertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyConvertServiceServer).Convert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CurrencyConvertService_Convert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyConvertServiceServer).Convert(ctx, req.(*CurrencyConvertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CurrencyConvertService_ServiceDesc is the grpc.ServiceDesc for CurrencyConvertService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CurrencyConvertService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CurrencyConvertService",
	HandlerType: (*CurrencyConvertServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Convert",
			Handler:    _CurrencyConvertService_Convert_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/currency_convert.proto",
}
